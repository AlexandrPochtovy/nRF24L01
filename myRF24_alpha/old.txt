uint8_t GetTxAddrLine(SPI_Conn *_spi, nRF24_dev *dev, uint8_t *addr, const uint8_t size) {
	if (ReadMultiReg(_spi, dev, TX_ADDR, addr, 5) == nRF_Complite) {
		return 1;
	} else return 0;
}

/*nR24_Connect WriteOneReg(SPI_Conn *_spi, nRF24_dev *dev, const uint8_t reg, const uint8_t value, uint8_t *txbuff, uint8_t *rxbuff) {//write singlebyte command and read hw status
	if (_spi->status == SPI_Bus_Free) {//send setup
		if (dev->step == 0) {
        _spi->reg = (reg & REGISTER_MASK) | W_REGISTER;//send command read one register
		_spi->txp = txbuff;
		_spi->txp[0] = value;
		_spi->rxp = rxbuff;
		_spi->len = 1;
        _spi->mode = SPI_MODE_WRITE;
        dev->step = 1;
        SPI_Start_IRQ_HWNSS(_spi);
		} else if (dev->step == 1) {
			dev->hwStatus = _spi->rxp[0];
			for (uint32_t i = 0; i < 50; i++) {
				__NOP();
			}
			dev->step = 0;
			return nRF_Complite;
		} else dev->step = 0;
	}
	return nRF_Processing;
}*/
//----------------------------------------------------------------------------------------------------------------------------------------
/*nR24_Connect ReadOneReg(SPI_Conn *_spi, nRF24_dev *dev, const uint8_t reg, uint8_t *txbuff, uint8_t *rxbuff) {//write singlebyte command and read hw status
	if (_spi->status == SPI_Bus_Free) {//send setup
		if (dev->step == 0) {
        _spi->reg = (reg & REGISTER_MASK) | R_REGISTER;//send command read one register
		_spi->txp = txbuff;
		_spi->rxp = rxbuff;
        _spi->len = 1;
        _spi->mode = SPI_MODE_READ;
        dev->step = 1;
        SPI_Start_IRQ_HWNSS(_spi);
		} else if (dev->step == 1) {
			dev->hwStatus = _spi->rxp[0];
			*value = _spi->rxp[1];
			for (uint32_t i = 0; i < 50; i++) {
				__NOP();
			}
			dev->step = 0;
			return nRF_Complite;
		} else dev->step = 0;
	}
	return nRF_Processing;
}*/
//----------------------------------------------------------------------------------------------------------------------------------------
/*
uint8_t PowerUp(SPI_Connection *_spi, nRF24_dev *dev) {
	static uint8_t stp = 0;
	static uint8_t cfg;
	switch (stp) {
	case 0://read config
		if (ReadOneReg(_spi, dev, CONFIG, &cfg) == nRF_Complite) {
			cfg |= 0x02;//cfg |= PWR_UP;
			stp = 1;
		}
		break;
	case 1:
		if (WriteOneReg(_spi, dev, CONFIG, cfg) == nRF_Complite) {
			LL_mDelay(50);
			stp = 0;
			return 1;
		}
	default:
		stp = 0;
		break;
	}
	return 0;
}
//----------------------------------------------------------------------------------------------------------------------------------------
uint8_t PowerDown(SPI_Connection *_spi, nRF24_dev *dev) {
	static uint8_t stp = 0;
	static uint8_t cfg;
	switch (stp) {
	case 0://read config
		if (ReadOneReg(_spi, dev, CONFIG, &cfg) == nRF_Complite) {
			cfg &= 0xFD;//cfg &= ~PWR_UP;
			stp = 1;
		}
		break;
	case 1:
		if (WriteOneReg(_spi, dev, CONFIG, cfg) == nRF_Complite) {
			stp = 0;
			return 1;
		}
	default:
		stp = 0;
		break;
	}
	return 0;
}
//----------------------------------------------------------------------------------------------------------------------------------------
uint8_t SetModeTX(SPI_Connection *_spi, nRF24_dev *dev) {
	static uint8_t stp = 0;
	static uint8_t cfg;
	switch (stp) {
	case 0://read config
		if (ReadOneReg(_spi, dev, CONFIG, &cfg) == nRF_Complite) {
			cfg &= ~PRIM_RX; //Выбор режима: 0 - TX (передатчик);
			stp = 1;
		}
		break;
	case 1:
		if (WriteOneReg(_spi, dev, CONFIG, cfg) == nRF_Complite) {
			stp = 0;
			return 1;
		}
	default:
		stp = 0;
		break;
	}
	return 0;
}
//----------------------------------------------------------------------------------------------------------------------------------------
uint8_t SetModeRX(SPI_Connection *_spi, nRF24_dev *dev) {
	static uint8_t stp = 0;
	static uint8_t cfg;
	switch (stp) {
	case 0://read config
		if (ReadOneReg(_spi, dev, CONFIG, &cfg) == nRF_Complite) {
			cfg |= PRIM_RX; //Выбор режима: 1 - RX (приемник);
			stp = 1;
		}
		break;
	case 1:
		if (WriteOneReg(_spi, dev, CONFIG, cfg) == nRF_Complite) {
			stp = 0;
			return 1;
		}
	default:
		stp = 0;
		break;
	}
	return 0;
}
//----------------------------------------------------------------------------------------------------------------------------------------
uint8_t SetIRQ(SPI_Connection *_spi, nRF24_dev *dev, uint8_t tx_irq, uint8_t rx_irq, uint8_t mr_irq) {
	static uint8_t stp = 0;
	static uint8_t cfg;
	switch (stp) {
	case 0://read config
		if (ReadOneReg(_spi, dev, CONFIG, &cfg) == nRF_Complite) {
			if (tx_irq) {cfg |= MASK_TX_DS;} else {cfg &= ~MASK_TX_DS;}//TX interrupt ON OFF
			if (tx_irq) {cfg |= MASK_RX_DR;} else {cfg &= ~MASK_RX_DR;}//RX interrupt ON OFF
			if (tx_irq) {cfg |= MASK_MAX_RT;} else {cfg &= ~MASK_MAX_RT;}//maximum retrier interrupt ON OFF
			stp = 1;
		}
		break;
	case 1:
		if (WriteOneReg(_spi, dev, CONFIG, cfg) == nRF_Complite) {
			stp = 0;
			return 1;
		}
	default:
		stp = 0;
		break;
	}
	return 0;
}
//----------------------------------------------------------------------------------------------------------------------------------------
uint8_t SetCRC(SPI_Connection *_spi, nRF24_dev *dev, uint8_t len) {//work
	static uint8_t stp = 0;
	static uint8_t cfg;
	switch (stp) {
	case 0://read config
		if (ReadOneReg(_spi, dev, CONFIG, &cfg) == nRF_Complite) {
			if (len == 2) {//CRC16 - set bit CRC_EN and set bit CRC0
				cfg |= (CRCO | EN_CRC);
			} else if (len == 1) {//CRC8 - set bit CRC_EN and reset bit CRC0
				cfg |= EN_CRC;
				cfg &= ~CRCO;
			}	else {//0 or any value disabled CRC - reset bit CRC_EN and reset bit CRC0
				cfg &= ~(CRCO | EN_CRC);
			}
			stp = 1;
		}
		break;
	case 1:
		if (WriteOneReg(_spi, dev, CONFIG, cfg) == nRF_Complite) {
			stp = 0;
			return 1;
		}
	default:
		stp = 0;
		break;
	}
	return 0;
}
*/


/*
uint8_t SetPowerLevel(SPI_Connection *_spi, nRF24_dev *dev, RF_SETUP_PWR level) {//work 0x00 - -18dBm; 0x01 - -12dBm; 0x10 - -6dBm; 0x11 - 0dBm
	static uint8_t stp = 0;
	static uint8_t cfg;
	switch (stp) {
	case 0://read config
		if (ReadOneReg(_spi, dev, RF_SETUP, &cfg) == nRF_Complite) {
			cfg |= level;
			stp = 1;
		}
		break;
	case 1:
		if (WriteOneReg(_spi, dev, RF_SETUP, cfg) == nRF_Complite) {
			stp = 0;
			return 1;
		}
	default:
		stp = 0;
		break;
	}
	return 0;
}
//----------------------------------------------------------------------------------------------------------------------------------------
uint8_t SetDataRate(SPI_Connection *_spi, nRF24_dev *dev, RF_SETUP_Speed speed) {//переписать на корректное сбрасывание битов
	static uint8_t stp = 0;//0xBE
	static uint8_t cfg;
	switch (stp) {
	case 0://read config
		if (ReadOneReg(_spi, dev, RF_SETUP, &cfg) == nRF_Complite) {
			cfg |= speed;
			stp = 1;
		}
		break;
	case 1:
		if (WriteOneReg(_spi, dev, RF_SETUP, cfg) == nRF_Complite) {
			stp = 0;
			return 1;
		}
	default:
		stp = 0;
		break;
	}
	return 0;
}
*/






uint8_t RF24::getAddrWidth(void)//work get addr size 3bytes = 3, 4bytes = 4, 5bytes = 5
{return readOneReg(SETUP_AW) + 2;}

void RF24::getRetries(uint8_t &delay, uint8_t &count) {//work возвращает число попыток и задержку между попытками доставки
	uint8_t data = readOneReg(SETUP_RETR);
	delay = ((data & ARD) >> 4);
	count = (data & ARC);
}

uint8_t RF24::getChannel(void) {//work
	return readOneReg(RF_CH);
}

uint8_t RF24::getPALevel(void) {//work 0x00 - -18dBm; 0x01 - -12dBm; 0x10 - -6dBm; 0x11 - 0dBm
	return ((readOneReg(RF_SETUP) >> 1) & 0x03);
}

uint8_t RF24::getDataRate(void) {//work 0 - 250kbs, 1 - 1Mbs, 2 - 2Mbs
  uint8_t dr = readOneReg(RF_SETUP) & (RF_DR_LOW | RF_DR_HIGH);
  if ( dr == 0x20) {//speed 250 kbit RF_DR_LOW = 1 & RF_DR_HIGH = 0
		return 0;
	} else if (dr == 0x08) {//speed 2 Mbit RF_DR_LOW = 0 & RF_DR_HIGH = 1
		return 2;
	} else if (dr == B000) {//speed 1 Mbit RF_DR_LOW = 0 & RF_DR_HIGH = 0
		return 1;
	} else return 255;//error setup speed
}

void RF24::toggle_features(void) {//for clone activate
  RF24Pins::Pin<csnPin>::Clear();
	SPI.transfer(ACTIVATE);
  SPI.transfer(0x73);
	RF24Pins::Pin<csnPin>::Set();
}

//эти методы можно проверить только в рабочей передаче начало=============================================
uint8_t RF24::isTXFull(void)
{return (readOneReg(STATUS) & TX_FULL) == TX_FULL;}

uint8_t RF24::getRXChannelNumber(void)//work номер линии, в которой доступны данные для чтения
{return ((readOneReg(STATUS) & RX_P_NO) >> 1);}

uint8_t RF24::isRXDataRecive(void)//есть прерывание (флаг) наличия входящих данных
{return (readOneReg(STATUS) & RX_DR) == RX_DR;}

void RF24::isRXDataReciveRst(void)//сброс флага наличия входящих данных
{writeOneReg(STATUS, readOneReg(STATUS) | RX_DR);}

uint8_t RF24::isTXDataSend(void)//есть прерывание (флаг) по успешной отправке данных
{return (readOneReg(STATUS) & TX_DS) == TX_DS; }

void RF24::isTXDataSendRst(void)//сброс флага успешной отправке данных
{ writeOneReg(STATUS, readOneReg(STATUS) | TX_DS); }

uint8_t RF24::isMaxRetries(void)//флаг исчерпания попыток передачи
{ return (readOneReg(STATUS) & MAX_RT) == MAX_RT; }

void RF24::isMaxRetriesRst(void)//сброс флага исчерпания попыток передачи
{ writeOneReg(STATUS, readOneReg(STATUS) | MAX_RT); }
//эти методы можно проверить только в рабочей передаче конец=====================================

void RF24::getNetworkStat(uint8_t &lost, uint8_t &resend) {//need test when network work
	uint8_t reg = readOneReg(OBSERVE_TX);
	lost = (reg & PLOS_CNT)>>4;
	resend = reg & PLOS_CNT;
}

uint8_t RF24::getRPD(void)//work 1=level > -64dBm
{return (readOneReg(RPD) & 0x01);}

void RF24::getAddrRX(const uint8_t line, uint8_t *addr) {
	readBytes(RX_ADDR_P0 + line, addr, 5);
}

void RF24::getAddrTX(uint8_t *addr) {
	readBytes(TX_ADDR, addr, 5);
}

void RF24::setDataSizeRX(const uint8_t line, const uint8_t size) {
	writeOneReg(RX_PW_P0 + line, (size < 32 ? size : 32));
}

void RF24::setDPL(bool en, uint8_t line) {
  if (en) {
	writeOneReg(FEATURE, readOneReg(FEATURE) | EN_DPL);//разрешили обработку пакетов динамического размера
  writeOneReg(DYNPD, (readOneReg(DYNPD) | (1<<line)));//включили динамический пакет для конкретной линии
	writeOneReg(EN_AA, (readOneReg(EN_AA) | (1<<line)));//включили подтверждение приема для линии приема
	} else {
	writeOneReg(FEATURE, readOneReg(FEATURE) & ~EN_DPL);//запретили обработку пакетов динамического размера
  writeOneReg(DYNPD, (readOneReg(DYNPD) & ~(1<<line)));//выключили динамический пакет для конкретной линии
	writeOneReg(EN_AA, (readOneReg(EN_AA) & ~(1<<line)));//выключили подтверждение приема для линии приема
	}
}

void RF24::setDPL(uint8_t mask) {
	writeOneReg(FEATURE, readOneReg(FEATURE) | EN_DPL);//разрешили обработку пакетов динамического размера
  writeOneReg(DYNPD, mask);//включили динамический пакет для конкретной линии
	setAutoAck(mask);//включили подтверждение приема для линии приема
}


void RF24::sendData(uint8_t * buf, uint8_t count) {//work, need test
	writeBytes(W_TX_PAYLOAD, buf, count);
	RF24Pins::Pin<cePin>::Set();//Re-Transfer packet
	myDelay(50);	//add for easy use
	RF24Pins::Pin<cePin>::Clear();
}

/*nR24_Connect SendActivateCommand(SPI_Connection *_spi, nRF24_dev *dev) {//read singlebyte command and read hw status
	if (_spi->status == SPI_Bus_Free) {//send setup
		if (dev->step == 0) {
			_spi->rxp = &dev->hw_status;
			_spi->reg = ACTIVATE;//send ACTIVATE command for fucking china module
			_spi->len = 0;
			_spi->mode = SPI_MODE_WRITE;
			dev->step = 1;
			SPI_Start_IRQ_HWNSS(_spi);
		} else  if (dev->step == 1) {
			dev->step = 0;
			for (uint32_t i = 0; i < 50; i++) {
							__NOP();
						}
			return nRF_Complite;
		} else  dev->step = 0;
	}
	return nRF_Processing;
}*/


//----------------------------------------------------------------------------------------------------------------------------------------
/*uint8_t ReadCRC(SPI_Connection *_spi, nRF24_dev *dev) {//work
	if (reg == (CRCO | EN_CRC)) {
		return 2;
	} else if (reg == EN_CRC) {
		return 1;
	} else if (reg == 0) {
		return 0;
	}
}*/


//----------------------------------------------------------------------------------------------------------------------------------------
/*uint8_t DisableReadLine(SPI_Connection *_spi, nRF24_dev *dev, uint8_t pipe) {//выключает каналы приёмника по маске
	if (pipe < 6) {
		uint8_t en_rx = 1<<pipe;
		if (WriteSingleReg(_spi, dev, EN_AA, (en_rx & 0x3F)) == nRF_Complite) {
			return 1;
		} else return 0;
	} return 1;
}*/